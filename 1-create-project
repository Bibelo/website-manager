#!/bin/bash

# set -x

usage() {
        PROGNAME=$0
        cat <<- EOF

	This script saves the logs collection for a given container
	Missing arguments
	$PROGNAME <project_name> dev|prod

	NB: do not add the -dev or -prod extension to the name of the project

	For example:
	$PROGNAME test1 dev

	EOF
		exit 1
}

init(){
        GREEN='\033[0;32m'
        RED='\033[0;31m'
        CYAN='\033[0;36m'
        NC='\033[0m' # No Color

	SCRIPT=`realpath $0`
	SCRIPTPATH=`dirname $SCRIPT`

	. ./config.ini
}

clearmsg(){
        msg=$1
        printf "${CYAN}${msg}${NC}\n"
}

generaldb_credential(){
    unset login
    prompt="Enter generaldb_mariadb admin username: "
    read -p "$prompt" username
    
    unset password
    prompt="Enter generaldb_mariadb admin password: "
    while IFS= read -p "$prompt" -r -s -n 1 char
    do
        if [[ $char == $'\0' ]]
        then
            break
        fi
        prompt='*'
        password+="$char"
    done
    echo
}

generaldb_credentials_file(){
	mode=$1
        unset username
        unset password
        if [[ ! -f .${mode}_generaldb_creds ]]; then
                echo "Credentials file cannot be found (.generaldb_creds)"
                exit 1
        fi

        . ./.${mode}_generaldb_creds

        username=${mode}_username
        username=${!username}
        password=${mode}_password
        password=${!password}

        if [[ -z $username ]] || [[ -z password ]]; then
                echo "Credentials are empty (in .generaldb_creds)"
                exit 1
        fi
}

generate_new_credentials(){
	export new_username=$new_project-$(bw generate -p)
	export new_password=$(bw generate)
}

create_db_user(){
	#command="CREATE DATABASE \`$new_project\`; SHOW DATABASES; CREATE USER \"$new_username\" IDENTIFIED BY \"$new_password\"; SELECT User FROM mysql.user; GRANT ALL PRIVILEGES ON \`$new_project.*\` TO \"$new_username\"; FLUSH PRIVILEGES; SHOW GRANTS FOR \"$new_username\";"
	command="CREATE DATABASE \`$new_project\`; SHOW DATABASES; CREATE USER \"$new_username\" IDENTIFIED BY \"$new_password\"; SELECT User FROM mysql.user; GRANT ALL PRIVILEGES ON \`$new_project\`.* TO \"$new_username\"; FLUSH PRIVILEGES; SHOW GRANTS FOR \"$new_username\";"

	docker exec -it $generaldb_container_name mysql -u "$username" -p$password -e"$command"
}

create_files(){

	mkdir -p /var/www/$new_project/wordpress
	chown 1001 /var/www/$new_project/wordpress
	chmod o-rws /var/www/$new_project/wordpress

	mkdir /projects/$new_project/

	cp $SCRIPTPATH/sources/docker-compose_wordpress.yml /projects/$new_project/docker-compose.yml
	
	sed -i -e "s/{{new_project}}/$new_project/g" -e "s/{{database}}/$generaldb_container_name/g" /projects/$new_project/docker-compose.yml

#	export new_project=$new_project
#	export new_username=$new_username
#	export new_password=$new_password

	docker compose -f /projects/$new_project/docker-compose.yml up -d
}

main(){
	init

	mode=$2
	new_project=$1-$mode
	export new_project
	generaldb_container_name=${mode}_generaldb_container_name
	generaldb_container_name=${!generaldb_container_name}

	generaldb_credentials_file $mode
	generate_new_credentials
	create_db_user
	create_files

	clearmsg "\nSave this info (in Bitwarden?):"
	cat <<-EOF
	New database in $generaldb_container_name: $new_project
	New user: $new_username
	New password: $new_password
	EOF

	clearmsg "\nIf you ever need to recreate the wordpress container:"
	cat <<-EOF
	NB: always export the variables before creating the container

	export new_project=$new_project; export new_username=$new_username; export new_password=$new_password
	docker compose -f $project_path/$new_project/docker-compose.yml up -d
	EOF

	clearmsg "\nTo create backup:"
	cat <<-EOF
	$credentials_path/.$new_project.cnf
	[mysqldump]
	user=$new_username
	password=$new_password
	EOF
	

}

if [[ $# -ne 2 ]]
        then
                init
                usage
fi

main $@

